S E 491/491: Applying Blockchain to Energy Delivery Systems
The purpose of this project was to to create a secure network for a geographically diverse Energy Delivery System that currently utilized public internet infrastructure for communications. The integrity of measurements, commands, and authenticity of control devices performing communication are critical for trusted operations. The use of blockchain technology was hypothesized to provide a secure network for managing Energy Delivery Systems by removing the dependency on a central service and ensure extra security of the network by using a permissioned blockchain system.
We developed a software solution using a component based architecture, where the components consisted of an API, a User Interface, and the Blockchain Network (network of individually hosted nodes that uses a Publisher to post data, a Ledger to authenticate and contain data, and smart contracts for the manipulation and query of data).
The blockchain network was developed using HyperLedger Fabric that used YAML configuration files for structuring/setting up the network and Docker Composer for defining, creating, and deploying containerized nodes. The network reports ledger updates to the API, receives requests to run smart contracts from the API, and after authenticating the requester, runs smart contracts in order to update the ledger using a Publisher. The publisher used Node.js and is able to post data to the network. We used the default key value database called CouchDB to handle translation logs and ledgers. Smart Contracts give users of the system the ability to query, create, and.or update an entry in the blockchain network based on the users permissions for the system.
The API was developed using Node.js and runs smart contracts when new performance data has been received by a device on the network or an authenticated user requests to view data. 
The User Interface was developed using ReactJS because ReactJS is primarily used for building single page applications, which fitted our expected solution for the web user interface. The UI allowed users to request data from devices on the network and manage the blockchain users.
We used an Agile approach to development using two-week sprints with a retro and demo at the end of each sprint, as necessary. We followed a test-driven development process where all merge requests were required to pass all component and system-level tests and be reviewed and approved by at least one other member of the team. We also used Gitlab issues to track individual and team progress on tasks taken from the Gantt chart we created.
Professional project encompassing the entire software development life cycle where our team was assigned a problem statement submitted by an outsourced client that we were to communicate with in order to gather requirements, meet and discuss project progress, demo progress or research, and would asses our teams performance and deliverables that were given to the client at the end of the project.
Team followed the SCRUM Agile development procedures and worked in two week sprints. After each sprint was finished, we’d discuss the progress our team has made, any problems we’ve had, and what we want to work on next and then assign the tasks that needed finished during the next sprint amongst the team. Our client was involved in these meetings to discuss the progress made during the previous sprint and give feedback that we’d implement into our task list.
Created and maintained a software design document that was submitted for approval by the client and an instructor at various milestones throughout the project that was included with a final report that was listed in the deliverables to the client.
Team had to shift or sometimers completely change the scope of the project or implement an alternative software solution based on feedback from the client after discussing knowledge obtained by team members while implementing or researching various components of the project.
Followed the SCRUM Agile software development practice to ensure we could implement Continuous Integration and Continuous Deployment (CI/CD) in our workflow. CI/CD was required because the primary purpose of the project was to observe and analyze the performance of the system when run on the blockchain we created and compare this to current solutions to determine if blockchain was a viable alternative. After initial analysis, our next task was to see what changes made to the network would result in a difference in performance.
Our implementation of Continuous Integration ran on all merge requests and ran on the master branch weekly to ensure it stays clean. Continuous Deployment was available for the blockchain network, API, and UI after changes passed testing.

Team Website: https://sdmay20-12.sd.ece.iastate.edu/